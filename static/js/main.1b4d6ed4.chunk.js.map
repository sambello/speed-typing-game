{"version":3,"sources":["hooks/useWordGame.js","App.js","serviceWorker.js","index.js"],"names":["useWordGame","startingTime","useState","text","setText","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","wordCount","setWordCount","textBoxRef","useRef","handleChange","e","value","target","calculateWordCount","trim","split","filter","word","length","startGame","current","disabled","focus","endGame","useEffect","setTimeout","time","App","ref","onChange","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gQA6CeA,MA3Cf,WAAyC,IAApBC,EAAmB,uDAAJ,GAAI,EACZC,mBAAS,IADG,mBAC7BC,EAD6B,KACvBC,EADuB,OAEMF,mBAASD,GAFf,mBAE7BI,EAF6B,KAEdC,EAFc,OAGMJ,oBAAS,GAHf,mBAG7BK,EAH6B,KAGdC,EAHc,OAIFN,mBAAS,GAJP,mBAI7BO,EAJ6B,KAIlBC,EAJkB,KAK9BC,EAAaC,iBAAO,MAE1B,SAASC,EAAaC,GAAI,IACdC,EAAUD,EAAEE,OAAZD,MACRX,EAAQW,GAGZ,SAASE,EAAmBd,GAExB,OADiBA,EAAKe,OAAOC,MAAM,KACnBC,QAAO,SAAAC,GAAI,MAAa,KAATA,KAAaC,OAGhD,SAASC,IACLf,GAAiB,GACjBF,EAAiBL,GACjBG,EAAQ,IACRO,EAAWa,QAAQC,UAAW,EAC9Bd,EAAWa,QAAQE,QAGvB,SAASC,IACLnB,GAAiB,GACjBE,EAAaO,EAAmBd,IAapC,OAVAyB,qBAAU,WACFrB,GAAiBF,EAAgB,EACjCwB,YAAW,WACPvB,GAAiB,SAAAwB,GAAI,OAAIA,EAAO,OACjC,KACsB,IAAlBzB,GACPsB,MAEL,CAACtB,EAAeE,IAEZ,CAAEI,aAAYE,eAAcV,OAAMI,gBAAeF,gBAAekB,YAAWd,c,MCNvEsB,MAhCf,WAAgB,IAAD,EASP/B,EAAY,IAPZW,EAFO,EAEPA,WACAE,EAHO,EAGPA,aACAV,EAJO,EAIPA,KACAI,EALO,EAKPA,cACAF,EANO,EAMPA,cACAkB,EAPO,EAOPA,UACAd,EARO,EAQPA,UAGJ,OACI,6BACI,qDACA,8BACIuB,IAAKrB,EACLsB,SAAUpB,EACVE,MAAOZ,EACPsB,UAAWlB,IAEf,+CAAqBF,GACrB,4BACI6B,QAASX,EACTE,SAAUlB,GAFd,SAMA,2CAAiBE,KCnBT0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1b4d6ed4.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\"\n\nfunction useWordGame(startingTime = 20) {\n    const [text, setText] = useState(\"\")\n    const [timeRemaining, setTimeRemaining] = useState(startingTime)\n    const [isTimeRunning, setIsTimeRunning] = useState(false)\n    const [wordCount, setWordCount] = useState(0)\n    const textBoxRef = useRef(null)\n\n    function handleChange(e) {\n        const { value } = e.target\n        setText(value)\n    }\n\n    function calculateWordCount(text) {\n        const wordsArr = text.trim().split(\" \")\n        return wordsArr.filter(word => word !== \"\").length\n    }\n\n    function startGame() {\n        setIsTimeRunning(true)\n        setTimeRemaining(startingTime)\n        setText(\"\")\n        textBoxRef.current.disabled = false\n        textBoxRef.current.focus()\n    }\n\n    function endGame() {\n        setIsTimeRunning(false)\n        setWordCount(calculateWordCount(text))\n    }\n\n    useEffect(() => {\n        if (isTimeRunning && timeRemaining > 0) {\n            setTimeout(() => {\n                setTimeRemaining(time => time - 1)\n            }, 1000)\n        } else if (timeRemaining === 0) {\n            endGame()\n        }\n    }, [timeRemaining, isTimeRunning])\n\n    return { textBoxRef, handleChange, text, isTimeRunning, timeRemaining, startGame, wordCount }\n}\n\nexport default useWordGame","import React from \"react\"\nimport useWordGame from \"./hooks/useWordGame\"\nimport \"./App.css\";\n\nfunction App() {\n    const {\n        textBoxRef, \n        handleChange, \n        text, \n        isTimeRunning, \n        timeRemaining, \n        startGame, \n        wordCount\n    } = useWordGame(30)\n    \n    return (\n        <div>\n            <h1>How fast do you type?</h1>\n            <textarea\n                ref={textBoxRef}\n                onChange={handleChange}\n                value={text}\n                disabled={!isTimeRunning}\n            />\n            <h4>Time remaining: {timeRemaining}</h4>\n            <button \n                onClick={startGame}\n                disabled={isTimeRunning}\n            >\n                Start\n            </button>\n            <h1>Word count: {wordCount}</h1>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}